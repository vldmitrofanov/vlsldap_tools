#!/bin/bash
#
# vlsldap_machineadd - Part of scripts set, that help you to manage OpenLDAP
#
# Written by Vladimir Mitrofanov <shirker2006@gmail.com>
#
#
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2 as published by the
# Free Software Foundation. See the LICENSE file included with
# this program for more details.
# 

. /etc/vlsldap.conf
. ${VLS_PATH}lib/functions.sh

APP_NAME=${0##*/}
SHOW_HELP=0
DEBUG=0
TEST=0
FORCE=0
DELETE=0
DEF_PCGROUP='515'
DN_PC_SEARCH="ou=Computers,${BASE_DN}"

function show_help() {
	echo
	echo "==========================================================================="
	echo "    $APP_NAME is designed to add a new PC under Samba domain"
	echo "==========================================================================="
	echo
	echo " USAGE:"
	echo
	echo " $APP_NAME --pcname='<PC-name>'"
	echo "          And script will do the rest."
	echo 
	echo " OPTIONS:"
	echo
	echo " --group='<groupID>'"
	echo "          OPTIONAL: You can specify group ID as well"
	echo
	echo " --delete"
	echo "          WARNING: Will delete the entry"
	echo
	echo " --test"
	echo "          OPTIONAL: Use test mode. Will not add or remove anything"
	echo
}

function ldap_delete_pc() {
	local sring="/usr/bin/ldapdelete -h $LDAP_HOST -p $LDAP_PORT -D $DN_MANAGER -w $DN_PASSWD -r \"uid=${1},${DN_PC_SEARCH}\""
	[ "$DEBUG" -eq 1 ] && echo "$sring"
	
	eval "$sring >/dev/null 2>&1"

	if [ $? -eq 0 ]
	then
		return 0
	else
		return 1
	fi
}


#Parse argument
while [ $# -gt 0 ]
 do
	case ${1%%=*} in
  		"--pcname") PCNAME=${1#*=}
		;;
		"--group") MAIN_GROUP=${1#*=}
		;;
		"--verbose") DEBUG=1
		;;
		"--test") TEST=1
			DEBUG=1
		;;
		"--delete") DELETE=1
		;;
		"-v") DEBUG=1
		;;
		"-?") SHOW_HELP=1
		;;
		"--help") SHOW_HELP=1
		;;
		*) show_help
   			exit 1
   		;;
	esac
	shift
done

[ "$SHOW_HELP" -eq 1 ] && show_help && exit 0

if [ -z "$PCNAME" ] || [ "${#PCNAME}" -lt 2 ] || [[ "$PCNAME" == *--pcname* ]]
then
	echo
	echo "USAGE: $APP_NAME --pcname='<PC-name>'" 
	echo 
	echo "Or run $APP_NAME --help"
	echo
	exit 1
fi

[ $(echo $PCNAME | grep -co "\$$") -eq 0 ] && PCNAME="${PCNAME}\$"

if [ "$DELETE" -eq 1 ] 
then
	if [ "$TEST" -eq 0 ]
	then
		ldap_delete_pc $PCNAME
		[ $? -ne 0 ] && echo "ERROR on deleting" && exit 1
		echo "DELETED!"
		exit 0
	else
		echo "Test mode! Will not delete anything"
		echo
		echo "LDAP lookup results:"
		echo
		/usr/bin/ldapsearch -h $LDAP_HOST -p $LDAP_PORT -D $DN_MANAGER -w $DN_PASSWD -b "uid=${PCNAME},${DN_PC_SEARCH}"
		exit 0
	fi
fi

[ -z "$MAIN_GROUP" ] && MAIN_GROUP=$DEF_PCGROUP

[ "$DEBUG" -eq 1 ] && echo && echo "PC name: $PCNAME"

# Done with names. Let's check, this PC may already exist
RAND_STR=$(generate_pass)
LDIF_FILE="/tmp/${USERNAME}${RAND_STR}.ldif"
LDIF_ERROR_FILE="${LDIF_FILE}.error"

[ -f "${LDIF_ERROR_FILE}" ] && rm -f "${LDIF_ERROR_FILE}"

/usr/bin/ldapsearch -h $LDAP_HOST -p $LDAP_PORT -D $DN_MANAGER -w $DN_PASSWD -b "uid=${PCNAME},${DN_PC_SEARCH}" > $LDIF_FILE 2>$LDIF_ERROR_FILE

# check, if error file is empty
[[ -s $LDIF_ERROR_FILE ]]

exeresult=$?

[ $exeresult -ne 1 ] && echo "ERROR on ldapsearch!" && cat $LDIF_ERROR_FILE && exit 1

# parse the results:
if [ $(cat $LDIF_FILE | grep -c "result: 0 Success") -gt 0 ]
then
	[ "$DEBUG" -eq 1 ] && echo && echo && echo "	--=== PC exists ===--"
	if [ "$FORCE" -eq 1 ] 
	then 
		echo
		echo "We will delete the entry from LDAP first"
	else
		# PC uid match. This user is really exists. Well..
		echo
		echo "Error!:: PC \"$PCNAME\" already exists!"
		echo
		echo "Here are details:"
		cat $LDIF_FILE | grep -E '(dn:|cn:)'
		echo
		rm -f $LDIF_FILE
		exit 1
	fi
fi

LAST_UID=$(/usr/bin/ldapsearch -h $LDAP_HOST -p $LDAP_PORT -D $DN_MANAGER -w $DN_PASSWD -b "${DN_PC_SEARCH}" -s sub "uidNumber=*" | grep -Po '(?<=uidNumber: ).*'| sort | tail -1)
[ "$DEBUG" -eq 1 ] && echo "Largest uidNumber: $LAST_UID" && echo
[ "$LAST_UID" -lt 1 ] && echo "ERROR: can't retrieve the latest uidNumber" && exit 1

echo "dn: uid=${PCNAME},${DN_PC_SEARCH}" > $LDIF_FILE
echo "objectClass: top" >> $LDIF_FILE
echo "objectClass: account" >> $LDIF_FILE
echo "objectClass: posixAccount" >> $LDIF_FILE
echo "objectClass: sambaSamAccount" >> $LDIF_FILE
echo "cn: ${PCNAME}" >> $LDIF_FILE
echo "uid: ${PCNAME}" >> $LDIF_FILE
echo "uidNumber: ${LAST_UID}" >> $LDIF_FILE
echo "gidNumber: ${MAIN_GROUP}" >> $LDIF_FILE
echo "homeDirectory: /dev/null" >> $LDIF_FILE
echo "loginShell: /bin/false" >> $LDIF_FILE
echo "description: Computer" >> $LDIF_FILE
echo "gecos: Computer" >> $LDIF_FILE
#sambaSID: S-1-5-21-2636616856-561316741-165820116-1394
echo "sambaSID: $(generate_sambaSID)" >> $LDIF_FILE	
echo "sambaAcctFlags: [W          ]" >> $LDIF_FILE
#echo "sambaNTPassword:"

[ "$DEBUG" -eq 1 ] && echo $LDIF_FILE && cat $LDIF_FILE

[ "$TEST" -eq 0 ] && eval "/usr/bin/ldapadd -h $LDAP_HOST -p $LDAP_PORT -D $DN_MANAGER -w $DN_PASSWD -f $LDIF_FILE > /dev/null 2>&1" || exit 0

if [ $? -eq 0 ]
then
	echo "${PCNAME}" 
else
	echo "ERROR OCCURED WHILE exporting ldif file. Extiting with 1"
	exit 1
fi

[ -f $LDIF_FILE ] && rm -rf $LDIF_FILE
exit 0
