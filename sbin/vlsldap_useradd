#!/bin/bash
#
# vlsldap_useradd - Part of scripts set, that help you to manage OpenLDAP
#
# Written by Vladimir Mitrofanov <shirker2006@gmail.com>
#
#
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2 as published by the
# Free Software Foundation. See the LICENSE file included with
# this program for more details.
# 
APP_NAME=${0##*/}
SHOW_HELP=0
DEBUG=0
TEST=0
#DEF_GROUP='513'

. /etc/vlsldap.conf
. ${VLS_PATH}lib/functions.sh

show_help() {
	echo "==========================================================================="
	echo "          $APP_NAME is designed to add a new LDAP/Samba user"
	echo "==========================================================================="
	echo
	echo " USAGE:"
	echo " $APP_NAME --fullname='Firstname Lastname'"
	echo "          And script will do the rest."
	echo 
	echo " OR:"
#	echo
	echo " $APP_NAME --first='Firstname' --last='Lastname'"
	echo
	echo " There are certain options available as well:"
	echo
	echo " --group='<groupID>"
	echo "          To set primary group manually. Otherwise will be set as default group $DEF_GROUP"
	echo
	echo " --email='<user@domain.ltd>'"
	echo "          To specify the email-box"
	echo
	echo " --test"
	echo "        Will not add the user, test only"
	echo 
	echo " NOTE:"
	echo "        In case of error, check settings in /etc/vlsldap.conf file"
	echo "        You may use --debug option to trace the problem down"
	echo
}

#generate_ssha (){
#	local mypass=$(/usr/sbin/slappasswd -h {SSHA} -s $1)
#	echo $mypass
#}


#Parse argument
while [ $# -gt 0 ]
 do
	case ${1%%=*} in
  		"--fullname") FULLNAME=${1#*=}
		;;
		"--group") MAIN_GROUP=${1#*=}
		;;
		"--email") USER_EMAILBOX=${1#*=}
		;;
		"--first")
			FIRST_STR=${1#*=}
			FIRSTNAME=$(echo ${FIRST_STR,,} | tr -d " ")
		;;
		"--last")
			LAST_STR=${1#*=}
			LASTNAME=${LAST_STR,,}
		;;
	        "--debug") DEBUG=1
		;;
		"--test") TEST=1
			DEBUG=1
		;;
		"-f") FORCE=1
		;;
		"--verbose") DEBUG=1
		;;
		"-v") DEBUG=1
		;;
		"-?") SHOW_HELP=1
		;;
		"--help") SHOW_HELP=1
		;;
		*) show_help
   			exit 1
   		;;
	esac
	shift
done

[ "$SHOW_HELP" -eq 1 ] && show_help && exit 0

if [ -z "$FIRSTNAME" ] && [ -z "$LASTNAME" ]
then
	if [ -z "$FULLNAME" ] || [ "${#FULLNAME}" -lt 5 ] || [[ "$FULLNAME" == *--fullname* ]]
	then
		echo
		echo "USAGE: $APP_NAME --fullname='Firstname Lastname'" 
		echo 
		echo "Or run $APP_NAME --help"
		echo
		exit 1
	fi


	#FIRSTNAME=${FULLNAME%% *}
	#FIRSTNAME=${FIRSTNAME,,}

	LASTNAME=${FULLNAME##* }
	LASTNAME=${LASTNAME,,}
	STR=$(echo ${FULLNAME,,}| tr -d " ")
	STR_FIRST_INT=$((${#STR}-${#LASTNAME}))
	FIRSTNAME=${STR:0:$STR_FIRST_INT}
else
	FULLNAME="${FIRST_STR^} ${LAST_STR^}"
fi


if [ -z "$MAIN_GROUP" ]
then
        MAIN_GROUP=$DEF_GROUP
elif [ $(echo $MAIN_GROUP | grep -cE '^[0-9]{3,5}$') -lt 1 ]
then
        MAIN_GROUP=$DEF_GROUP
fi

[ -z "$USER_EMAILBOX" ] && USER_EMAILBOX="${FIRSTNAME}.${LASTNAME}${MAIL_DOMAIN}"

USERNAME=${FIRSTNAME}${LASTNAME:0:1}

[ "${#FIRSTNAME}" -lt 2 ] && echo && echo "ERROR: First name is too short" && exit
[ "${#LASTNAME}" -lt 2 ] && echo && echo "ERROR: Last name is too short" && exit

[ "$DEBUG" -eq 1 ] && echo && echo "Full name: $FULLNAME"
[ "$DEBUG" -eq 1 ] && echo && echo "First name: $FIRSTNAME"
[ "$DEBUG" -eq 1 ] && echo && echo "Last name: $LASTNAME"
[ "$DEBUG" -eq 1 ] && echo && echo "EMAIL: $USER_EMAILBOX"
[ "$DEBUG" -eq 1 ] && echo && echo "Username: $USERNAME"

# Done with names. Let's check, this user may already exist
RAND_STR=$(generate_pass)
LDIF_FILE="/tmp/${USERNAME}${RAND_STR}.ldif"
LDIF_ERROR_FILE="${LDIF_FILE}.error"

[ -f "${LDIF_ERROR_FILE}" ] && rm -f "${LDIF_ERROR_FILE}"

/usr/bin/ldapsearch -h $LDAP_HOST -p $LDAP_PORT -D $DN_MANAGER -w $DN_PASSWD -b "uid=${USERNAME},${DN_USERS_SEARCH}" > $LDIF_FILE 2>$LDIF_ERROR_FILE

# check, if error file is empty
[[ -s $LDIF_ERROR_FILE ]]

exeresult=$?

[ $exeresult -ne 1 ] && echo "ERROR on ldapsearch!" && cat $LDIF_ERROR_FILE && exit 1

# parse the results:
if [ $(cat $LDIF_FILE | grep -c "result: 0 Success") -gt 0 ]
then
	# oh, we do have this user already.. But could it be under another full name?
	[ "$DEBUG" -eq 1 ] && echo && echo && echo "	--=== User exists ===--"
	if [ $(cat $LDIF_FILE | grep -c "$FULLNAME") -gt 0 ]
	then
		# Full name match. This user is really exists. Well..
		echo
		echo "Error!:: user \"$FULLNAME\" already exists!"
		echo
		echo "Here are details:"
		cat $LDIF_FILE | grep -E '(uid|cn:|mailRoutingAddress)'
		echo
		rm -f $LDIF_FILE
		exit 1
	else
		# Ah no, its ok. Just overlapsing names. Well modify the username
		FULL_LENGTH=$((${#FIRSTNAME}+${#LASTNAME}))
		PATTERN_N=2
		USER_EXISTS=1
		
		[ "$DEBUG" -eq 1 ] && echo "FULL NAME LENGTH: $FULL_LENGTH" && echo		
		[ "$DEBUG" -eq 1 ] && echo "USERNAME LENGTH:: ${#USERNAME}" && echo
		
		# running a loop, till username length < fullname length	
		while [ ${#USERNAME} -lt ${FULL_LENGTH} ]
		do
			USERNAME=${FIRSTNAME}${LASTNAME:0:$PATTERN_N}
			[ "$DEBUG" -eq 1 ] && echo "Modified! New USERNAME: $USERNAME" && echo "	--=== User Fixed! ===--" && echo

			if [ $(cat $LDIF_FILE | grep -c $USERNAME) -gt 0 ]
			then
				PATTERN_N=$(($PATTERN_N+1))
				continue
			else
				USER_EXISTS=0
				break
			fi
		done
	
		if [ "$USER_EXISTS" -eq 1 ]
		then			
		# This user exists too. No more trying
			echo
                	echo "Error!:: user \"${FIRSTNAME}${LASTNAME:0:1}\" or even $USERNAME  already exist!"
        	        echo
			rm -f $LDIF_FILE
	                exit 1
		fi
	fi
fi

#Create a random passwd
PASSWD=$(generate_pass)

# SSHA is for LDAP
PASSWD_SSHA=$(generate_ssha $PASSWD)

# Hash for Samba "sambaNTPassword"
sambaNTPassword=$(/usr/bin/php -f /usr/local/slapdtools_vlad/sbin/sambaNTPassword.php $PASSWD)

# Lets check for samba sambaPrimaryGroupSID, where gidNumber=${MAIN_GROUP}
while true
do
	SAMBA_GROUP=`/usr/bin/ldapsearch -h $LDAP_HOST -p $LDAP_PORT -D $DN_MANAGER -w $DN_PASSWD -b ${DN_GROUPS_SEARCH} -s sub "gidNumber=${MAIN_GROUP}" | grep -oP '(?<=sambaSID: ).*' 2>$LDIF_ERROR_FILE`

	[[ -s $LDIF_ERROR_FILE ]]

	exeresult=$?

	[ $exeresult -ne 1 ] && echo "ERROR on ldapsearch!" && cat $LDIF_ERROR_FILE && exit 1

	if [ ${#SAMBA_GROUP} -eq 0 ]
	then
		echo "ERROR! No sambaPrimaryGroupSID found for GID=${MAIN_GROUP}"
		echo
		read -p "Continue with default group? (y/n) " RESP
		if [ "$RESP" == "y" ]
		then
  			MAIN_GROUP=$DEF_GROUP
		else
  			echo "Ok, you may start over with correct GroupID. Exiting..."
			sleep 2
			exit 1
		fi
	else
		[ "$DEBUG" -eq 1 ] && echo && echo "sambaPrimaryGroupSID: ${SAMBA_GROUP}" && echo
		break
	fi
done 
#
LAST_UID=$(/usr/bin/ldapsearch -h $LDAP_HOST -p $LDAP_PORT -D $DN_MANAGER -w $DN_PASSWD -b "${DN_USERS_SEARCH}" -s sub "uidNumber=*" | grep -Po '(?<=uidNumber: ).*'| sort | tail -1)
[ "$DEBUG" -eq 1 ] && echo "Largest uidNumber: $LAST_UID" && echo
[ "$LAST_UID" -lt 1 ] && echo "ERROR: can't retrieve the latest uidNumber" && exit 1
# prepare ldif file to export user:
echo "dn: uid=${USERNAME},${DN_USERS_SEARCH}" > $LDIF_FILE
echo "objectClass: top" >> $LDIF_FILE
echo "objectClass: person" >> $LDIF_FILE
echo "objectClass: organizationalPerson" >> $LDIF_FILE
echo "objectClass: inetOrgPerson" >> $LDIF_FILE
echo "objectClass: posixAccount" >> $LDIF_FILE
echo "objectClass: shadowAccount" >> $LDIF_FILE
echo "objectClass: sambaSamAccount" >> $LDIF_FILE
echo "objectClass: inetLocalMailRecipient" >> $LDIF_FILE
echo "cn: ${FULLNAME}" >> $LDIF_FILE
echo "sn: ${FULLNAME##* }" >> $LDIF_FILE
echo "givenName: ${FULLNAME%% *}" >> $LDIF_FILE
echo "uid: ${USERNAME}" >> $LDIF_FILE
#uidNumber: 34519
echo "uidNumber: $(($LAST_UID+1))" >> $LDIF_FILE
echo "gidNumber: ${MAIN_GROUP}" >> $LDIF_FILE
echo "homeDirectory: /home/${USERNAME}" >> $LDIF_FILE
echo "loginShell: /bin/bash" >> $LDIF_FILE
echo "gecos: System User" >> $LDIF_FILE
echo "sambaPwdCanChange: 0" >> $LDIF_FILE
#sambaSID: S-1-5-21-2636616856-561316741-165820116-70038
echo "sambaSID: $(generate_sambaSID)" >> $LDIF_FILE
echo "sambaPrimaryGroupSID: ${SAMBA_GROUP}">> $LDIF_FILE
echo "mailRoutingAddress: ${USER_EMAILBOX}" >> $LDIF_FILE
#sambaLMPassword: 7713DD207ABA2F06AAD3B435B51404EE
echo "sambaAcctFlags: [U]" >> $LDIF_FILE
echo "sambaNTPassword: ${sambaNTPassword}" >> $LDIF_FILE
echo "userPassword: ${PASSWD_SSHA}" >> $LDIF_FILE

[ "$DEBUG" -eq 1 ] && echo $LDIF_FILE && cat $LDIF_FILE

[ "$TEST" -eq 0 ] && eval "/usr/bin/ldapadd -h $LDAP_HOST -p $LDAP_PORT -D $DN_MANAGER -w $DN_PASSWD -f $LDIF_FILE > /dev/null 2>&1" || exit 0
if [ $? -eq 0 ]
then
	echo "${FULLNAME}"
	echo "${USERNAME}:${PASSWD}"
	echo "${USER_EMAILBOX}"
else
	echo "ERROR OCCURED WHILE exporting ldif file. Extiting with 1"
	exit 1
fi

[ -f $LDIF_FILE ] && rm -rf $LDIF_FILE

echo -e "${PASSWD}\n${PASSWD}" | (/usr/bin/smbpasswd -a -s ${USERNAME}) > /dev/null 2>&1
if [ $? -eq 0 ]
then
        exit 0
else
        echo "ERROR on updating samba passwd"
        exit 1
fi

exit 0
